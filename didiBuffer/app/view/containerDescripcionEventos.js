/*
 * File: app/view/containerDescripcionEventos.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.1.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.containerDescripcionEventos', {
    extend: 'Ext.Container',
    alias: 'widget.containerdescripcioneventos',

    config: {
        id: 'containerDescripcionEventos',
        layout: {
            type: 'fit'
        },
        items: [
            {
                xtype: 'toolbar',
                docked: 'top',
                height: '10%',
                id: 'toolbarContainerDescripcionEventos',
                style: 'background: #3E3737',
                items: [
                    {
                        xtype: 'image',
                        centered: true,
                        height: '100%%',
                        html: '<img src="./resources/logo/Logo_DD.png" width="100%" height="100%">',
                        id: 'imagenToolbarContainerDescripcionEventos',
                        itemId: 'myimage7',
                        width: '40%'
                    },
                    {
                        xtype: 'button',
                        handler: function(button, event) {
                            //Esta linea es para cambiar al tab Inicio
                            Ext.getCmp("tabPanelPrincipal").setActiveItem(Ext.getCmp(viewDelQueSePasaHaciaDescripcionEventos));
                        },
                        baseCls: 'botonAtras',
                        height: '80%',
                        id: 'botonAtrasContainerDescripcionEventos',
                        right: '2%',
                        top: '10%',
                        ui: 'action-round',
                        width: '15%'
                    },
                    {
                        xtype: 'button',
                        handler: function(button, event) {

                            var fechaDelDiaDeHoyParaAgregadoEventosFavoritos=new Date();
                            Ext.getStore("storeEnvioAgregadoFavoritosPerfilUsuario").getProxy().setUrl("http://www.didicr.com/php/didiFavorito/insertaEventoFavorito.php");
                            Ext.getStore("storeEnvioAgregadoFavoritosPerfilUsuario").getProxy().setExtraParam('idEventoParam', Ext.getStore("storeDescripcionEventos").first().get("idEvento"));
                            Ext.getStore("storeEnvioAgregadoFavoritosPerfilUsuario").getProxy().setExtraParam('idUsuarioParam', idPerfilUsuarioDidi);
                            Ext.getStore("storeEnvioAgregadoFavoritosPerfilUsuario").getProxy().setExtraParam('fechaUsuarioEventoFavoritoParam', fechaDelDiaDeHoyParaAgregadoEventosFavoritos);
                            Ext.getStore("storeEnvioAgregadoFavoritosPerfilUsuario").load();

                            //Ext.getStore("storeEnvioAgregadoFavoritosPerfilUsuario").first().get("estado")+
                            Ext.Msg.alert('Aviso', 'Evento agregado.', Ext.emptyFn);

                            this.disable();
                        },
                        height: '80%',
                        id: 'botonFavoritosContainerDescripcionEventos',
                        left: '2%',
                        top: '10%',
                        ui: 'confirm',
                        width: '15%',
                        iconCls: 'favorites',
                        iconMask: true
                    }
                ]
            },
            {
                xtype: 'image',
                height: '60%',
                id: 'imagenPrincipalDescripcionEventos',
                top: '15%',
                width: '75%'
            },
            {
                xtype: 'container',
                height: '60%',
                id: 'containerBotonesDescripcionEventos',
                right: '2%',
                top: '15%',
                width: '20%',
                layout: {
                    type: 'vbox'
                },
                scrollable: 'vertical',
                items: [
                    {
                        xtype: 'spacer',
                        maxHeight: 20,
                        minHeight: 20,
                        width: 10
                    },
                    {
                        xtype: 'button',
                        handler: function(button, event) {
                            Ext.getCmp("containerDescripcionEventos").setMasked({xtype: 'loadmask', message: 'Espere por favor...'});

                            //En caso de que se este viendo un evento, y se quiera pedir un taxi, entonces
                            //no se borra la configuracion de Eventos, sino que se agrega un boton de atras
                            //para didiTaxis, en caso de querer volver hacia atras, y 
                            Ext.getCmp("tabPanelPrincipal").setActiveItem(Ext.getCmp("containerMapaSolicitudTaxi"));
                            //Se especifica desde cual tab se esta pasando hacia didiTaxi
                            tabDelQueSePasaHaciaTabSolicitudTaxi=Ext.getCmp("containerDescripcionEventos");
                        },
                        baseCls: 'botonTaxi',
                        height: 50,
                        id: 'botonHaciaDidiTaxiDescEventos',
                        ui: 'action-round',
                        width: '100%',
                        iconMask: true
                    },
                    {
                        xtype: 'spacer',
                        maxHeight: 20,
                        minHeight: 20,
                        width: 10
                    },
                    {
                        xtype: 'button',
                        handler: function(button, event) {
                            Ext.getCmp("containerDescripcionEventos").setMasked({xtype: 'loadmask', message: 'Espere por favor...'});

                            //Se pasa al tab del modulo de reservaciones
                            Ext.getCmp("tabPanelPrincipal").setActiveItem(Ext.getCmp("containerModuloReservaciones"));


                            //Se configura para que aparezca automaticamente la fecha del evento
                            var fechaParaDidiReserva= new Date();
                            var fechaParaDidiReservaString= Ext.getStore("storeDescripcionEventos").first().get("fecha");
                            fechaParaDidiReserva.setFullYear(parseFloat(fechaParaDidiReservaString.slice(0,4)),parseFloat(fechaParaDidiReservaString.slice(5,7))-1,parseFloat(fechaParaDidiReservaString.slice(8)));
                            Ext.getCmp("dateFieldReservacionRestaurante").setValue(fechaParaDidiReserva);
                            Ext.getCmp("dateFieldReservacionRestaurante").disable();


                            //alert(Ext.getStore("storeDescripcionEventos").first().get("hora"));

                            if(parseFloat(Ext.getStore("storeDescripcionEventos").first().get("hora").slice(0,2))>12){
                                horaReservaEvento=parseFloat(Ext.getStore("storeDescripcionEventos").first().get("hora").slice(0,2))-12;
                                Ext.getCmp("selectFieldHoraReservaRestaurante").setPlaceHolder(horaReservaEvento+":"+Ext.getStore("storeDescripcionEventos").first().get("hora").slice(3,5)+" p.m.");
                                //alert();
                            }
                            else{
                                Ext.getCmp("selectFieldHoraReservaRestaurante").setPlaceHolder(Ext.getStore("storeDescripcionEventos").first().get("hora").slice(0,5)+" a.m.");
                            }

                            Ext.getCmp("selectFieldHoraReservaRestaurante").disable();

                            //Ext.getCmp("selectFieldHoraReservaRestaurante").setPlaceHolder(Ext.getCmp("picker1ReservaRestaurante").getValue()['MyPickerSlot1']+":"+Ext.getCmp("picker2ReservaRestaurante").getValue()['MyPickerSlot2']+" "+Ext.getCmp("picker3ReservaRestaurante").getValue()['MyPickerSlot3']);

                            viewDelQuePasoAlViewDeReserva="containerDescripcionEventos";


                            //alert(fechaParaDidiReservaString.slice(0,4));
                            //alert(fechaParaDidiReservaString.slice(5,7));
                            //alert(fechaParaDidiReservaString.slice(8));
                            //Ext.getCmp("dateFieldReservacionRestaurante").setValue(fechaParaDidiReserva);

                            //Ext.getCmp("picker1ReservaRestaurante").setValue();

                        },
                        baseCls: 'botonDescReserva',
                        height: 50,
                        id: 'botonDidiReservaDescEventos',
                        ui: 'round',
                        width: '100%',
                        iconMask: true
                    },
                    {
                        xtype: 'spacer',
                        maxHeight: 20,
                        minHeight: 20,
                        width: 10
                    },
                    {
                        xtype: 'button',
                        handler: function(button, event) {
                            Ext.getCmp("containerDescripcionEventos").setMasked({xtype: 'loadmask', message: 'Espere por favor...'});

                            //Con este boton se pasa desde Desc Eventos hacia Desc Empresa, pasando idCliente
                            //como parametro
                            funcionParaAbrirDescEmpresa(Ext.getStore("storeDescripcionEventos").first().get("idCliente"),"containerDescripcionEventos");
                        },
                        baseCls: 'botonCreador',
                        height: 50,
                        id: 'botonHaciaViewClienteDescEventos',
                        ui: 'decline-round',
                        width: '100%',
                        iconMask: true
                    },
                    {
                        xtype: 'spacer',
                        maxHeight: 20,
                        minHeight: 20,
                        width: 10
                    },
                    {
                        xtype: 'button',
                        handler: function(button, event) {
                            Ext.getCmp("containerDescripcionEventos").setMasked({xtype: 'loadmask', message: 'Espere por favor...'});

                            Ext.getCmp("tabPanelPrincipal").setActiveItem(Ext.getCmp("containerMapaEventos"));


                            //Aqui se hace un tratamiento practicamente igual que en el boton de Mapa
                            //en Descripcion Empresa
                            arregloParaRecordsEnStoreDescEventos=[];
                            arregloParaRecordsEnStoreDescEventos.push(Ext.getStore("storeDescripcionEventos").first());
                            while(markersMapaEventos[0]){
                                markersMapaEventos.pop().setMap(null);
                            }



                            //Estas lineas son para que funcione el autoajuste del mapa para que se vean todos los pines
                            limitesMapaEventos = new google.maps.LatLngBounds();
                            limitesMapaEventos.extend(posActual);
                            //contadorParaExtraccionDuracionYDistanciaEmpresas=0;
                            distanciasHastaEvento=[];
                            duracionesHastaEventos=[];



                            //Este retraso es necesario, ya que de las otras 2 maneras de accesar al mapa para poner el
                            //pin de una empresa, no son problematicas, ya que se hace un .load() y por lo tanto hay una
                            //espera que opaca la eliminacion del uso del currentLocation, pero en este caso de hacerlo
                            //desde descripcion empresa, el problema es que no hay un .load() y por lo tanto no hay tal
                            //espera que opaque esa eliminacion del uso del currentLocation
                            var funcionRetrasoEnLlamadoAlProcessStoreMapaEventos = function() {
                                var taskPosActual = Ext.create('Ext.util.DelayedTask', function() {
                                    //Se llama al processStore para que coloque los pines y luego se oculta el dataView
                                    //en la parte inferior del mapaPrincipal
                                    Ext.getCmp("mapaCercaniaEventos").processStoreEventos(arregloParaRecordsEnStoreDescEventos);
                                }, this);
                                taskPosActual.delay(500);
                            };
                            //Esta es la funcion que hace que se refresque la variable que almacena la posicion actual
                            funcionRetrasoEnLlamadoAlProcessStoreMapaEventos();





                            //Ext.getCmp("mapaCercaniaEventos").setMapCenter({ latitude: Ext.getStore("storeDescripcionEventos").first().get("latitud"), longitude: Ext.getStore("storeDescripcionEventos").first().get("longitud") });
                            //Ext.getCmp("mapaCercaniaEventos").processStoreEventos(arregloParaRecordsEnStoreDescEventos);

                            Ext.getCmp("dataViewDidiMapaEventos").setHidden(1);
                            viewDelQuePasoHaciaMapaEventos="containerDescripcionEventos";



                        },
                        baseCls: 'botonMapa',
                        height: 50,
                        id: 'botonHaciaMapaDescEventos',
                        ui: 'confirm-round',
                        width: '100%',
                        iconMask: true
                    },
                    {
                        xtype: 'spacer',
                        maxHeight: 20,
                        minHeight: 20,
                        width: 10
                    },
                    {
                        xtype: 'button',
                        handler: function(button, event) {
                            //Provisional
                            Ext.Msg.alert('Aviso', 'Hacia el facebook del evento.', Ext.emptyFn);
                        },
                        baseCls: 'botonFacebook',
                        height: 50,
                        id: 'botonHaciaFacebookDescEventos',
                        ui: 'action-round',
                        width: '100%',
                        iconMask: true
                    }
                ]
            },
            {
                xtype: 'container',
                height: '25%',
                id: 'containerInfoDescripcionEventos',
                top: '75.5%',
                width: '100%',
                scrollable: 'vertical'
            },
            {
                xtype: 'container',
                height: '10%',
                id: 'containerTituloDescripcionEventos',
                left: '20%',
                width: '60%'
            },
            {
                xtype: 'container',
                height: '0.5%',
                style: 'background-color: black',
                top: '14.5%',
                width: '100%'
            },
            {
                xtype: 'container',
                height: '0.5%',
                style: 'background-color: black',
                top: '75%',
                width: '100%'
            }
        ],
        listeners: [
            {
                fn: 'onImagenToolbarContainerDescripcionEventosTap',
                event: 'tap',
                delegate: '#imagenToolbarContainerDescripcionEventos'
            }
        ]
    },

    onImagenToolbarContainerDescripcionEventosTap: function(img, e, options) {
        //Todo logo de Didi redirige hacia containerInicio
        Ext.getCmp("tabPanelPrincipal").setActiveItem(Ext.getCmp("containerInicio"));
    }

});