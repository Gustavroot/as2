/*
 * File: app/view/mapaSolicitudTaxi.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.1.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.mapaSolicitudTaxi', {
    extend: 'Ext.Map',
    alias: 'widget.mapaSolicitudTaxi',

    requires: [
        'MyApp.view.override.mapaSolicitudTaxi'
    ],

    config: {
        id: 'mapaSolicitudTaxi',
        itemId: 'mapaSolicitudTaxi',
        useCurrentLocation: true,
        mapOptions: {
            zoom: 16,
            streetViewControl: false,
            mapTypeControl: false,
            zoomControl: false,
            
        },
        listeners: [
            {
                fn: 'onMapMaprender',
                event: 'maprender'
            },
            {
                fn: 'onImagenLogoDidiMapaPrincipalEnTabPanelTap1',
                event: 'tap',
                delegate: '#imagenLogoDidiTaxi'
            }
        ],
        items: [
            {
                xtype: 'image',
                height: '10%',
                html: '<img src="http://www.didicr.com/imagenes/didiTaxi/Logo_DDtaxi.png" width="100%" height="100%">',
                id: 'imagenLogoDidiTaxi',
                itemId: 'myimage27',
                left: '31.5%',
                top: '2%',
                width: '37%'
            },
            {
                xtype: 'button',
                handler: function(button, event) {
                    //Primero se hace visible el tabBar nuevamente
                    Ext.getCmp("tabPanelPrincipal").getTabBar().setHidden(0);
                    //Luego, si se viene del tab de containerMapa, entonces quiere decir que ahi
                    //se tomo la decision de cual mapa se queria ver, y se prefiere retornar al
                    //containerInicio que a ahi
                    //if(tabDelQueSePasaHaciaTabMapa==Ext.getCmp("containerMapa")){

                    Ext.getCmp("tabPanelPrincipal").setActiveItem(viewDelQuePasoHaciaDidiTaxi);

                    //}
                    //else{
                    //    Ext.getCmp("tabPanelPrincipal").setActiveItem(tabDelQueSePasaHaciaTabMapa);
                    //}

                },
                baseCls: 'botonAtras',
                height: '5%',
                id: 'botonAtrasDidiTaxi',
                right: '2%',
                top: '2.5%',
                ui: 'action-round',
                width: '10%'
            }
        ]
    },

    onMapMaprender: function(map, gmap, options) {
        /*
        //Codigo para renderizar el mapa
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
            function(position){
                var pos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                // var pos = new google.maps.LatLng( latitude: 9.381592, longitude: -84.135672 );
                marker=new google.maps.Marker({ //se quito el var del frente
                    position: pos,
                    map: gmap,
                    draggable: true,
                    animation: google.maps.Animation.DROP
                });
                markerLatLng=marker.getPosition();
                latitude=markerLatLng.lat();
                longitude=markerLatLng.lng();
                var geocoder = new google.maps.Geocoder();
                geocoder.geocode({location: pos}, function(results, status){ciudad=( results[0].address_components[0].long_name);});
            }
            );
        }
        //Se desactiva current Location
        //this.setUseCurrentLocation(0);
        */




        //Con estas lineas, se coloca un pin para referencia de la ubicacion del usuario,
        //es decir, se indica la ubicacion propia
        //Estas lineas van en este maprender para que cada vez que se renderiza el mapa entonces
        //se vuelve a actualizar el pin a la posicion actual
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
            function(position){
                //Se borra el pin anterior... inicialmente esta bien hacer esto porque 
                //se ha creado este pin en el launch
                markerPosActualDidiTaxi.setMap(null);
                //Se crea un objeto de posicion con la ubicacion actual propia
                var posTaxi = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                //Se crea el pin y se asigna al mapa Eventos
                markerPosActualDidiTaxi=new google.maps.Marker({ //se quito el var del frente
                    position: posTaxi,
                    map: gmap,
                    draggable: false
                });
                var geocoderTaxi = new google.maps.Geocoder();
                geocoderTaxi.geocode({location: posTaxi}, function(results, status){ciudad=( results[0].address_components[0].long_name);});
            }
            );
        }


    },

    onImagenLogoDidiMapaPrincipalEnTabPanelTap1: function(img, e, options) {
        //TOdo logo de DIdi redirige hacia containerInicio
        Ext.getCmp("tabPanelPrincipal").setActiveItem(Ext.getCmp("containerInicio"));
        //Al salir del mapa, hay que hacer visible el tabBar nuevamente
        Ext.getCmp("tabPanelPrincipal").getTabBar().setHidden(0);
    }

});