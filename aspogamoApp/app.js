/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.1.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

//@require @packageOverrides
Ext.Loader.setConfig({

});

Ext.application({
    models: [
        'modelPrueba',
        'modelPlayer',
        'modelTest1',
        'modelTeam'
    ],
    stores: [
        'storePrueba',
        'storePlayer',
        'storeTest1',
        'storeTeam'
    ],
    views: [
        'tabPanelPrincipal',
        'containerHome',
        'containerMain',
        'containerProfile',
        'containerStatistics',
        'containerMyVideos',
        'BASURERO',
        'containerInicial',
        'tabPanelInicial',
        'containerIngresoUserYPass',
        'containerRegistroUser'
    ],
    name: 'MyApp',

    launch: function() {
        //AQUI VA EL CODIGO DE VERIFICADO DE GUARDADO DEL LOGIN EN 
        //EL LOCALSTORAGE


        try{
            //alert(Ext.os.deviceType);
            if(Ext.os.deviceType!="Desktop"){
                FB.init({ appId: "162179373948765", nativeInterface: CDV.FB, useCachedDialogs: false });
            }
            else{
                window.fbAsyncInit = function() {
                    // init the FB JS SDK
                    FB.init({
                        appId      : '162179373948765', // App ID from the App Dashboard
                        channelUrl : '//www.didicr.com/channel.html', // Channel File for x-domain communication
                        status     : true, // check the login status upon init?
                        cookie     : true, // set sessions cookies to allow your server to access the session?
                        xfbml      : true  // parse XFBML tags on this page?
                    });
                };
            }
            testAPI = function(){
                //FB.api('/me', function(response) {
                //---------------------------------------------------------------------------------------------------------------------------------------------------------------
                //alert("entro en testAPI");
                var url = '/me?fields=name,email,birthday';
                FB.api(url, function(response) {
                    //funcionAEjecutarLogeoConFacebook();
                    MyApp.app.logInFacebookSettings();
                    //DiDi.app.getController("FuncionesGeneral").funcionEjecucionCodigoInternoFBAPI(response);
                });
            };
            login = function() {
                //    alert("fgey");
                FB.login(
                function(response) {
                    //alert(response.session);
                    if (response.authResponse) {
                        Ext.Msg.alert('Aviso', 'Logeado.', Ext.emptyFn);
                        testAPI();
                    } else {
                        Ext.Msg.alert('Aviso', 'No logeado.', Ext.emptyFn);
                    }
                },
                { scope: "email,user_birthday" }
                );
            };
            if(Ext.os.deviceType=="Desktop"){
                (function(d, debug){
                    var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
                    if (d.getElementById(id)) {return;}
                    js = d.createElement('script'); js.id = id; js.async = true;
                    js.src = "//connect.facebook.net/en_US/all" + (debug ? "/debug" : "") + ".js";
                    ref.parentNode.insertBefore(js, ref);
                }(document, false));
            }
            //--------------------------------------------------------------------------------------------------------------------------------------
        }
        catch(e){
            //Ext.Msg.alert('Aviso', 'Fail to connect with facebook.', Ext.emptyFn);
        }












        //------------------------------------------------------------------------
        //Se define inicialmente la variable para habilitar el dibujado
        variableHabilitarDibujado=0;
        //Cuando esta variable esta en 0, no se puede dibujar, mientras que cuando
        //esta en 1, se puede dibujar
        variableParaDetenerDibujado=0;
        //Esta es la funcion que permite dibujar, con un if adentro
        //Se corre el for solamente cuando la variable esta en 1... esto significa que
        //se esta dibujando el video en el canvas
        funcionDibujadoEnCanvas=function(){
            if(variableParaDetenerDibujado===1){
                for(var i=0; i<arregloDePuntosDibujoX.length; i++){
                    //Se crean algunas variables para el canvas que son necesarias
                    canvasContext=document.getElementById("canvasContainerMyVideos").getContext("2d");
                    canvasContext.strokeStyle='#A4A4A4';
                    canvasContext.beginPath();
                    //En el caso de que el punto en el plano del canvas sea tal que corres-
                    //ponga a un caso de que se haya despegado el dibujado, entonces
                    //no se le da continuidad al REdibujado en el canvas, esto a traves
                    //del arreglo arregloDePuntosDibujoBool
                    if(arregloDePuntosDibujoBool[i]!==1){
                        canvasContext.moveTo(arregloDePuntosDibujoX[i-1],arregloDePuntosDibujoY[i-1]);
                    }
                    //Para cada punto, se enlaza con el anterior
                    canvasContext.lineTo(arregloDePuntosDibujoX[i],arregloDePuntosDibujoY[i]);
                    canvasContext.stroke();
                    canvasContext.closePath();
                }
            }
            //El REdibujado de las lineas en el canvas se hace cada 10 milisegundos
            setTimeout(funcionDibujadoEnCanvas, 5);
        };
        //Se esperan dos segundos antes de comenzar con este proceso de dibujado,
        //para que ya los objetos existan
        setTimeout(funcionDibujadoEnCanvas,2000);


        /*
        funcionIniciadoPlayMyVideos=function(video){
        video.addEventListener('play', function(){
        video.playbackRate=1;
        variableBoolParaDetencionDraw=0;
        cw = video.clientWidth;
        ch = video.clientHeight;
        //alert(Ext.getCmp("viewportAspogamo").getWindowWidth());
        document.getElementById("canvasContainerMyVideos").width = Ext.Viewport.getWindowWidth()*0.9;
        document.getElementById("canvasContainerMyVideos").height = Ext.Viewport.getWindowHeight()*0.8*0.75;
        canvasContext=document.getElementById("canvasContainerMyVideos").getContext('2d');
        draw(video,canvasContext,canvasContext,document.getElementById("canvasContainerMyVideos").width,document.getElementById("canvasContainerMyVideos").height);
    },false);
    //En caso de que se detenga el video, se detiene el dibujado del
    //video sobre el canvas
    video.addEventListener('stop', function(){
        variableBoolParaDetencionDraw=1;
    },false);
    };
    */



    //LINEA TEMPORAL!!!
    setTimeout(function(){
    MyApp.app.funcionSeteadoConfigInicial();
    //Ext.getCmp('tabPanelPrincipal').getTabBar().addCls('my-tabbar-tablet');
    Ext.getCmp('containerLogoSupIzquierda').setHtml('<img src="resources/images/Acelogo.svg" height="'+Ext.Viewport.getWindowWidth()*0.85*0.25*0.6+'" width="'+Ext.Viewport.getWindowWidth()*0.85*0.25*0.6+'">');
    Ext.getCmp('containerLogoSupDerecha').setHtml('<img src="resources/images/logopris.svg" height="'+Ext.Viewport.getWindowWidth()*0.85*0.25*0.6+'" width="'+Ext.Viewport.getWindowWidth()*0.85*0.25*0.6+'">');
    },2000);



    //
    colors=['blue','red'];
    Ext.create('MyApp.view.tabPanelPrincipal', {fullscreen: true});
    },

    funcionSeteadoConfigInicial: function() {
        Ext.getCmp('containerMyVideosOriginal').setHtml("<p><video id='videoContainerMyVideos' width='100%' controls src='./resources/videos/1.mp4' type='video/mp4'>Bla.</video></p>");
        //'<iframe id="player" type="text/html" width="640" height="390" src="http://www.youtube.com/embed/M7lc1UVf-VE?enablejsapi=1&origin=http://example.com" frameborder="0"></iframe>'
        //Ext.getCmp('containerMyVideosOriginal').setHtml('<center><iframe id="videoContainerMyVideos" width="420" height="315" src="http://www.youtube.com/embed/pYqyYyIDCh4" frameborder="0" allowfullscreen></iframe></center>');

        //Se setea el html del canvas para que tenga las dimensiones adecuadas
        var heightCanvas=Ext.Viewport.getWindowHeight()*0.8*0.85*0.85;
        Ext.getCmp("containerMyVideosCanvas").setHtml("<div id='divDelCanvasContainerMyVideos'> <canvas id='canvasContainerMyVideos' width="+Ext.Viewport.getWindowWidth()*0.9+"px height="+heightCanvas+"px></canvas> </div>");


        /*
        //INICIALIZACION DE COSAS NECESARIAS PARA EL DIBUJADO
        //Esto 3 arreglos permite hacer el REdibujado, y el tercero
        //de estos arreglos es el que permite hacer la identificacion
        //de cuando se despego del dibujado el dedo o el mouse
        arregloDePuntosDibujoX=[];
        arregloDePuntosDibujoY=[];
        arregloDePuntosDibujoBool=[];
        //Se pone a escuchar al containerMyVideosCanvas ante el toque inicial
        Ext.getCmp("containerMyVideosCanvas").element.on({
            touchstart: function(e,node){
                //alert('se toco!');
                if(variableHabilitarDibujado==1){
                    //document.getElementById("videoContainerMyVideos").webkitEnterFullscreen();
                    canvasContext=e.target.getContext("2d");
                    canvasContext.moveTo(e.target.layerX,e.target.layerY);
                    //
                    puntoTocadoAnteriorX=e.event.layerX;
                    puntoTocadoAnteriorY=e.event.layerY;
                    //
                    arregloDePuntosDibujoX.push(puntoTocadoAnteriorX);
                    arregloDePuntosDibujoY.push(puntoTocadoAnteriorY);
                    arregloDePuntosDibujoBool.push(1);
                }
            }
        });
        //Se hace que el containerMyVideosCanvas quede escuchando el evento
        //de continuar tocando despues del toque inicial
        Ext.getCmp("containerMyVideosCanvas").element.on({
            touchmove: function(e,node){
                if(variableHabilitarDibujado==1){
                    //----------------------------------------------------------------
                    canvasContext=e.target.getContext("2d");
                    canvasContext.strokeStyle='rgb(55,55,255)';
                    canvasContext.beginPath();
                    canvasContext.moveTo(puntoTocadoAnteriorX,puntoTocadoAnteriorY);
                    //
                    canvasContext.lineTo(e.event.layerX,e.event.layerY);
                    canvasContext.stroke();
                    canvasContext.closePath();
                    //
                    puntoTocadoAnteriorX=e.event.layerX;
                    puntoTocadoAnteriorY=e.event.layerY;
                    //
                    arregloDePuntosDibujoX.push(puntoTocadoAnteriorX);
                    arregloDePuntosDibujoY.push(puntoTocadoAnteriorY);
                    arregloDePuntosDibujoBool.push(0);
                }
                //----------------------------------------------------------------
            }
        });
        Ext.getCmp("containerMyVideosCanvas").element.on({
            touchend: function(e,node){
                variableHabilitarDibujado=0;
                Ext.getCmp("botonSeguirJugadorVideoContainerMyVideos").setText("Seguir jugador");
                Ext.getCmp("botonSeguirJugadorVideoContainerMyVideos").setUi("normal");
                //falta aqui codigo de enviar informacion de posiciones, un .load
                arregloDePuntosDibujoX=[];
                arregloDePuntosDibujoY=[];
                arregloDePuntosDibujoBool=[];
            }
        });


        //Se agrega el evevnto de play al video original, de manera tal que dibuje en el
        //otro canvas
        document.getElementById("videoContainerMyVideos").addEventListener('play', function(){
            alert('we');
            document.getElementById("videoContainerMyVideos").playbackRate=1;
            variableBoolParaDetencionDraw=0;
            cw = document.getElementById("videoContainerMyVideos").clientWidth;
            ch = document.getElementById("videoContainerMyVideos").clientHeight;
            //alert(Ext.Viewport.getWindowWidth());
            document.getElementById("canvasContainerMyVideos").width = Ext.Viewport.getWindowWidth()*0.9;
            document.getElementById("canvasContainerMyVideos").height = Ext.Viewport.getWindowHeight()*0.8*0.75;
            canvasContext=document.getElementById("canvasContainerMyVideos").getContext('2d');
            draw(document.getElementById("videoContainerMyVideos"),canvasContext,canvasContext,document.getElementById("canvasContainerMyVideos").width,document.getElementById("canvasContainerMyVideos").height);
            alert('dibujando');
        },false);
        //En caso de que se detenga el video, se detiene el dibujado del
        //video sobre el canvas
        document.getElementById("videoContainerMyVideos").addEventListener('stop', function(){
            variableBoolParaDetencionDraw=1;
        },false);
        */




        MyApp.app.funcionIniciadoPlayMyVideos(document.getElementById("videoContainerMyVideos"));

        Ext.getCmp('listaDistanciasOrderJugadores').setLoadingText(null);

        /*

        this bit below is just the object holding the drawing I'm trying to sketch

        */

        var logoSketch            = {
            strokes:[
            {
                strokeStyle     : "rgb(96, 111, 117)",
                interval        : 40,
                lineWidth        : 2.0,
                lineCap            : "round",
                lineJoin        : "round",
                startPoint        : [29.8, 72.9],
                points    : [
                [29.9, 73.1, 41.1, 65.8, 41.4, 66.3],
                [41.5, 66.4, 11.1, 91.9, 11.1, 91.9],
                [11.1, 91.9, 68.2, 57.0, 69.1, 58.5],
                [69.7, 59.6, 7.7, 99.4, 8.6, 100.9],
                [8.7, 101.1, 82.4, 57.3, 82.8, 58.1],
                [83.5, 59.2, 7.5, 108.1, 8.2, 109.3],
                [8.9, 110.5, 97.3, 57.9, 97.3, 57.9],
                [5.9, 118.5, 97.3, 57.9, 97.3, 57.9],
                [6.5, 119.4, 109.1, 58.3, 109.3, 58.8],
                [109.3, 58.8, 7.0, 124.3, 7.5, 125.2],
                [9.8, 129.1, 119.1, 55.2, 121.5, 59.4],
                [124.1, 63.9, 3.1, 127.8, 6.4, 133.6],
                [7.3, 135.1, 109.4, 74.1, 109.4, 74.1],
                [112.7, 79.8, -0.5, 138.3, 2.7, 143.9],
                [5.4, 148.6, 95.0, 90.6, 95.0, 90.6],
                [97.4, 94.8, 2.8, 151.9, 2.8, 152.0],
                [2.8, 152.0, 88.7, 97.0, 91.0, 101.1],
                [92.7, 103.9, 4.0, 158.5, 4.4, 159.2],
                [5.7, 161.5, 84.7, 110.2, 85.9, 112.2],
                [86.6, 113.4, 4.4, 164.4, 5.7, 166.6],
                [7.1, 169.1, 76.1, 121.4, 78.1, 124.8],
                [79.2, 126.6, 6.6, 173.7, 6.6, 173.7],
                [6.7, 173.8, 76.7, 129.2, 78.4, 132.2],
                [78.6, 132.6, 1.0, 184.9, 1.0, 184.9],
                [78.3, 140.3, 1.0, 184.9, 1.0, 184.9],
                [78.7, 140.9, 8.3, 187.9, 8.3, 187.9],
                [8.3, 187.9, 78.6, 142.5, 80.7, 146.1],
                [82.4, 149.1, 8.4, 195.8, 8.5, 195.9],
                [10.7, 199.7, 81.4, 153.8, 81.4, 153.8],
                [83.5, 157.5, 2.4, 202.7, 4.1, 205.8],
                [5.0, 207.2, 86.5, 158.2, 86.5, 158.2],
                [88.4, 161.6, 5.9, 210.9, 6.9, 212.5],
                [9.2, 216.6, 81.0, 167.2, 82.1, 169.0],
                [82.7, 170.1, 1.9, 217.5, 4.1, 221.4],
                [4.3, 221.8, 82.9, 170.8, 85.1, 174.7],
                [85.8, 175.9, 1.6, 224.7, 4.1, 229.0],
                [5.3, 231.1, 86.7, 179.5, 87.5, 180.9],
                [88.4, 182.3, 7.0, 232.4, 8.3, 234.7],
                [93.6, 185.5,7.0, 232.4, 8.3, 234.7],
                [1.6, 246.2, 93.3, 192.8, 93.5, 193.2],
                [3.5, 249.4, 93.3, 192.8, 93.5, 193.2],
                [93.5, 193.2, 0.7, 250.1, 2.5, 253.4],
                [2.5, 253.4, 100.3, 193.3, 101.9, 196.1],
                [101.9, 196.1, 2.1, 255.0, 5.1, 260.2],
                [5.2, 260.4, 107.2, 200.0, 107.7, 200.9],
                [107.7, 200.9, 4.2, 263.6, 6.2, 267.1],
                [7.9, 270.2, 110.0, 205.6, 110.6, 206.8],
                [110.6, 206.8, -0.6, 274.1, 1.3, 277.5],
                [3.7, 281.7, 112.9, 206.9, 115.6, 211.5],
                [115.6, 211.5, 1.3, 279.6, 3.6, 283.6],
                [3.6, 283.6, 117.6, 214.6, 119.0, 217.0],
                [121.5, 221.5, 3.6, 290.3, 3.9, 290.9],
                [5.3, 293.3, 120.7, 223.5, 120.7, 223.5],
                [124.0, 229.4, 5.1, 297.7, 5.1, 297.7],
                [5.1, 297.7, 124.4, 225.4, 125.9, 228.0],
                [129.4, 234.0, 5.7, 305.6, 5.7, 305.6],
                [5.7, 305.6, 128.1, 229.0, 130.7, 233.5],
                [6.7, 312.4, 128.1, 229.0, 130.7, 233.5],
                [6.7, 312.4, 130.2, 236.0, 132.4, 239.8],
                [133.6, 241.9, 3.0, 314.4, 6.5, 320.5],
                [6.5, 320.5, 135.7, 239.6, 138.5, 244.3],
                [138.5, 244.3, 3.8, 325.8, 5.3, 328.4],
                [9.4, 335.6, 145.3, 244.5, 146.7, 246.8],
                [1.9, 337.9, 145.3, 244.5, 146.7, 246.8],
                [3.4, 340.6, 145.6, 252.8, 146.5, 254.4],
                [148.8, 258.3, 7.7, 342.1, 7.7, 342.1],
                [7.7, 342.1, 149.4, 257.6, 150.6, 259.7],
                [152.8, 263.5, 0.3, 348.6, 2.5, 352.5],
                [5.2, 357.2, 152.9, 257.3, 156.5, 263.6],
                [156.5, 263.6, 0.6, 356.3, 2.8, 360.1],
                [5.5, 364.7, 163.7, 262.9, 165.6, 266.1],
                [170.3, 274.1, -0.7, 357.8, 4.5, 366.8],
                [6.9, 371.0, 165.8, 263.7, 170.1, 271.1],
                [170.1, 271.1, 0.1, 371.7, 2.6, 376.0],
                [5.8, 381.5, 170.9, 270.0, 174.7, 276.6],
                [176.3, 279.4, 4.2, 375.2, 7.3, 380.7],
                [9.0, 383.5, 168.2, 275.5, 173.5, 284.7],
                [173.5, 284.7, -0.1, 380.5, 5.0, 389.3],
                [7.3, 393.2, 180.6, 288.0, 180.6, 288.0],
                [6.2, 395.9, -0.1, 380.5, 5.0, 389.3],
                [7.4, 397.9, 180.2, 292.5, 181.5, 294.7],
                [182.6, 296.5, 3.6, 394.2, 8.3, 402.4],
                [13.6, 411.6, 189.2, 297.9, 189.2, 297.9],
                [192.4, 303.5, 14.0, 403.6, 15.5, 406.2],
                [17.7, 410.0, 182.6, 297.9, 187.7, 306.8],
                [191.2, 312.8, 20.6, 410.6, 20.6, 410.6],
                [21.3, 411.8, 192.5, 310.5, 192.9, 311.1],
                [195.6, 315.8, 15.9, 414.1, 19.0, 419.5],
                [195.6, 317.5, 192.5, 310.5, 192.9, 311.1],
                [200.4, 325.9, 19.6, 420.0, 22.6, 425.1],
                [22.6, 425.1, 194.5, 321.9, 196.3, 324.9],
                [198.7, 329.1, 34.1, 425.8, 34.1, 425.8],
                [36.5, 430.0, 193.8, 326.8, 196.7, 331.9],
                [199.6, 336.9, 32.9, 433.8, 32.9, 433.8],
                [199.6, 337.6, 193.8, 326.8, 196.7, 331.9],
                [203.0, 343.5, 40.8, 436.8, 40.8, 436.8],
                [45.3, 444.6, 204.7, 337.6, 206.7, 341.0],
                [210.4, 347.5, 51.7, 428.7, 56.0, 436.1],
                [58.5, 440.5, 203.8, 350.7, 203.8, 350.7],
                [207.8, 357.6, 63.8, 437.0, 64.7, 438.6],
                [64.7, 438.6, 201.3, 356.4, 202.7, 358.9],
                [205.4, 363.5, 68.9, 440.1, 70.3, 442.5],
                [70.8, 443.5, 206.8, 363.7, 206.8, 363.7],
                [210.8, 370.8, 78.3, 438.7, 81.1, 443.5],
                [81.8, 444.7, 203.1, 373.1, 203.1, 373.1],
                [205.5, 377.3, 96.5, 441.7, 96.7, 441.9],
                [98.5, 445.0, 197.1, 384.0, 197.1, 384.0],
                [108.0, 442.7, 197.1, 384.0, 197.1, 384.0],
                [108.0, 442.7, 196.8, 389.3, 197.7, 390.9],
                [120.3, 443.1, 185.2, 402.6, 120.5, 440.9],
                [135.3, 440.1, 185.2, 402.6, 186.5, 404.9],
                [139.5, 439.4, 185.2, 402.6, 126.5, 444.9],
                [139.5, 439.4, 179.9, 415.1, 180.4, 415.8]
                ]

            },
            {
                strokeStyle     : "rgb(96, 111, 117)",
                interval        : 40,
                lineWidth        : 2.0,
                lineCap            : "round",
                lineJoin        : "round",
                startPoint        : [136.9, 64.6],
                points    : [
                [136.9, 64.6, 150.7, 56.6, 150.7, 56.6],
                [151.6, 58.3, 111.8, 87.0, 111.9, 87.2],
                [112.6, 88.4, 160.5, 55.8, 162.0, 58.3],
                [162.0, 58.3, 98.3, 101.2, 99.2, 102.7],
                [101.6, 106.9, 182.6, 54.5, 182.6, 54.5],
                [182.6, 54.5, 92.4, 108.4, 95.0, 113.0],
                [96.3, 115.2, 191.9, 52.3, 193.9, 55.9],
                [196.1, 59.7, 90.6, 120.1, 91.8, 122.2],
                [208.3, 55.0, 191.9, 52.3, 193.9, 55.9],
                [211.9, 61.2, 87.2, 127.7, 89.4, 131.5],
                [214.6, 59.2, 232.0, 57.4, 232.0, 57.4],
                [218.3, 65.7, 89.4, 139.7, 89.4, 139.7],
                [91.1, 142.6, 232.0, 57.4, 232.0, 57.4],
                [94.8, 144.8, 95.9, 151.6, 95.9, 151.6],
                [98.2, 150.8, 248.4, 56.2, 248.4, 56.2],
                [248.6, 56.6, 95.9, 151.6, 95.9, 151.6],
                [96.9, 153.5, 261.4, 55.1, 261.8, 55.8],
                [266.6, 64.1, 94.4, 159.6, 94.5, 159.9],
                [97.7, 165.3, 270.3, 56.0, 271.3, 57.8],
                [271.3, 57.8, 94.1, 164.2, 95.9, 167.3],
                [96.7, 168.6, 279.4, 52.3, 283.3, 59.1],
                [285.2, 62.3, 103.0, 169.9, 103.3, 170.4],
                [103.7, 171.1, 296.2, 51.2, 299.6, 57.1],
                [301.1, 59.6, 96.0, 173.8, 99.7, 180.3],
                [99.7, 180.3, 312.8, 49.7, 316.1, 55.4],
                [318.3, 59.2, 106.4, 183.9, 106.4, 183.9],
                [109.1, 188.7, 325.6, 52.4, 327.7, 56.1],
                [333.9, 66.8, 112.5, 188.5, 112.5, 188.5],
                [112.5, 188.5, 333.8, 59.4, 334.4, 60.4],
                [334.4, 60.4, 111.2, 183.8, 117.1, 194.0],
                [123.5, 205.1, 345.1, 54.4, 348.5, 60.4],
                [348.5, 60.4, 113.2, 192.4, 118.2, 201.2],
                [118.2, 201.2, 351.3, 62.6, 353.0, 65.6],
                [354.6, 68.3, 115.7, 199.9, 120.2, 207.8],
                [127.5, 220.3, 353.2, 55.9, 360.8, 68.9],
                [362.5, 71.9, 127.1, 212.0, 127.1, 212.0],
                [128.5, 214.6, 360.5, 66.5, 365.2, 74.6],
                [129.1, 218.4, 131.4, 208.7, 138.5, 220.9],
                [136.1, 230.4, 375.1, 76.4, 375.1, 76.4],
                [375.6, 77.3, 131.4, 208.7, 138.5, 220.9],
                [374.0, 84.9, 298.8, 136.1, 298.8, 136.1],
                [375.5, 87.4, 136.6, 214.0, 143.5, 225.8],
                [148.3, 234.2, 298.8, 136.1, 298.8, 136.1],
                [303.6, 144.4, 141.0, 224.1, 145.5, 231.9],
                [146.5, 233.7, 270.6, 158.0, 271.3, 159.2],
                [272.5, 161.4, 146.8, 238.3, 147.2, 239.1],
                [147.7, 239.9, 254.3, 173.2, 256.1, 176.2],
                [258.7, 180.8, 152.3, 243.4, 152.3, 243.4],
                [155.1, 248.4, 243.1, 190.9, 243.1, 190.9],
                [243.1, 190.9, 154.1, 246.2, 155.7, 248.8],
                [157.3, 251.6, 241.1, 194.9, 243.1, 198.4],
                [243.1, 198.4, 160.1, 251.6, 161.3, 253.8],
                [232.2, 212.9, 241.1, 194.9, 243.1, 198.4],
                [232.8, 214.0, 170.5, 255.2, 170.7, 255.6],
                [170.7, 255.6, 227.3, 218.8, 229.1, 221.9],
                [230.0, 223.5, 174.3, 259.6, 174.8, 260.5],
                [174.8, 260.5, 230.9, 227.7, 231.1, 228.0],
                [232.2, 229.9, 174.2, 268.4, 174.2, 268.4],
                [175.5, 270.8, 233.3, 234.3, 233.3, 234.3],
                [234.4, 236.2, 180.7, 269.6, 181.7, 271.3],
                [182.6, 272.9, 231.0, 242.8, 231.0, 242.8],
                [231.5, 243.6, 187.0, 276.1, 187.0, 276.1],
                [187.3, 276.7, 233.3, 248.0, 233.9, 249.0],
                [233.9, 249.0, 190.4, 281.2, 190.5, 281.5],
                [191.5, 283.2, 232.6, 257.1, 232.6, 257.1],
                [232.6, 257.1, 196.3, 283.4, 197.4, 285.3],
                [198.3, 286.8, 234.2, 263.6, 234.4, 263.9],
                [235.2, 265.3, 199.6, 291.6, 199.6, 291.6],
                [199.9, 292.2, 233.8, 269.9, 234.7, 271.4],
                [234.7, 271.4, 198.4, 298.0, 199.1, 299.3],
                [238.2, 276.7, 236.3, 283.4, 237.1, 284.6],
                [238.9, 277.9, 201.7, 305.0, 201.7, 305.0],
                [201.8, 305.2, 236.3, 283.4, 237.1, 284.6],
                [237.5, 285.3, 206.0, 309.8, 206.0, 309.8],
                [206.4, 310.5, 243.7, 288.1, 243.7, 288.1],
                [244.2, 288.9, 206.7, 314.7, 207.8, 316.6],
                [245.6, 294.8, 243.7, 288.1, 243.7, 288.1],
                [246.1, 295.7, 211.4, 322.0, 211.4, 322.0],
                [211.9, 323.0, 244.1, 301.2, 244.9, 302.6],
                [244.9, 302.6, 211.2, 328.2, 211.7, 329.0],
                [211.8, 329.2, 251.7, 304.0, 252.5, 305.5],
                [252.8, 306.0, 210.4, 337.3, 210.6, 337.6],
                [211.7, 339.5, 257.5, 307.7, 258.7, 309.9],
                [258.9, 310.1, 211.3, 344.6, 211.3, 344.6],
                [212.7, 346.8, 256.3, 317.1, 256.9, 318.2],
                [257.1, 318.5, 215.5, 349.7, 215.5, 349.7],
                [216.2, 351.1, 265.0, 321.1, 265.0, 321.1],
                [215.9, 357.1, 215.5, 349.7, 215.5, 349.7],
                [217.0, 359.0, 266.5, 327.9, 266.5, 327.9],
                [268.3, 331.0, 212.8, 366.3, 212.9, 366.5],
                [213.8, 368.1, 273.8, 327.3, 275.6, 330.3],
                [275.6, 330.3, 209.9, 371.5, 211.9, 375.0],
                [211.9, 375.0, 281.1, 334.0, 281.6, 334.8],
                [214.5, 381.6, 209.9, 371.5, 211.9, 375.0],
                [214.5, 381.6, 282.9, 337.9, 284.7, 341.1],
                [286.2, 343.7, 207.2, 392.3, 207.6, 393.1],
                [209.0, 395.6, 286.5, 347.6, 286.5, 347.6],
                [288.9, 351.7, 203.4, 401.0, 204.2, 402.3],
                [204.6, 403.1, 296.1, 347.4, 296.9, 348.8],
                [297.5, 349.7, 195.1, 408.7, 198.0, 413.7],
                [200.6, 418.2, 299.1, 348.8, 301.9, 353.7],
                [301.9, 353.7, 173.0, 428.9, 176.0, 434.2],
                [179.3, 439.9, 303.9, 351.9, 307.6, 358.2],
                [307.6, 358.2, 173.7, 435.1, 177.3, 441.2],
                [177.3, 441.2, 312.0, 356.2, 315.1, 361.6],
                [317.2, 365.3, 188.3, 437.7, 190.6, 441.6],
                [193.5, 446.6, 318.9, 360.6, 321.9, 365.8],
                [323.9, 369.2, 203.2, 442.1, 203.2, 442.1],
                [322.7, 373.1, 318.9, 360.6, 321.9, 365.8],
                [217.3, 441.6, 203.2, 442.1, 203.2, 442.1],
                [220.3, 446.9, 331.4, 375.7, 331.4, 375.7],
                [234.9, 439.5, 244.5, 441.9, 244.5, 441.9],
                [234.9, 439.5, 331.9, 376.8, 334.8, 381.8],
                [336.8, 385.2, 244.5, 441.9, 244.5, 441.9],
                [246.9, 446.1, 345.8, 382.7, 346.0, 383.2],
                [347.1, 385.0, 254.6, 438.2, 256.9, 442.3],
                [256.9, 442.3, 348.5, 383.8, 350.9, 388.0],
                [350.9, 388.0, 272.7, 438.4, 273.8, 440.3],
                [357.3, 392.1, 348.5, 383.8, 350.9, 388.0],
                [358.8, 394.8, 279.7, 444.7, 279.7, 444.7],
                [281.5, 447.9, 362.6, 396.8, 362.6, 396.8],
                [299.8, 440.4, 312.5, 439.4, 313.1, 440.4],
                [301.7, 443.7, 373.4, 396.6, 374.0, 397.6],
                [375.1, 399.4, 312.5, 439.4, 313.1, 440.4],
                [313.1, 440.4, 378.3, 399.6, 379.7, 402.0],
                [379.7, 402.0, 323.2, 441.0, 323.6, 441.6],
                [325.0, 444.0, 381.3, 406.1, 382.2, 407.8],
                [382.4, 408.1, 343.6, 437.3, 343.6, 437.3],
                [343.8, 437.5, 365.2, 424.8, 365.2, 424.8]
                ]
            },
            {
                strokeStyle     : "rgb(96, 111, 117)",
                interval        : 40,
                lineWidth        : 2.0,
                lineCap            : "round",
                lineJoin        : "round",
                startPoint        : [136.9, 64.6],
                points    : [
                [319.5, 133.9, 362.4, 106.7, 363.4, 108.6],
                [365.6, 112.4, 285.7, 157.5, 287.3, 160.2],
                [287.7, 161.0, 380.8, 105.3, 381.1, 106.0],
                [382.6, 108.5, 264.0, 181.0, 264.0, 181.0],
                [267.5, 187.2, 387.5, 109.7, 387.5, 109.7],
                [389.6, 113.4, 250.8, 192.1, 252.8, 195.6],
                [256.4, 201.7, 384.1, 119.8, 384.1, 119.8],
                [387.4, 125.5, 251.6, 204.3, 251.6, 204.3],
                [255.8, 211.7, 383.2, 120.3, 386.7, 126.3],
                [388.7, 129.8, 248.1, 214.5, 248.1, 214.5],
                [248.7, 215.6, 386.9, 134.4, 386.9, 134.4],
                [386.9, 134.4, 245.8, 221.5, 246.6, 222.8],
                [249.6, 228.0, 384.6, 133.2, 388.9, 140.7],
                [390.2, 142.9, 241.4, 230.7, 242.6, 232.7],
                [244.9, 236.6, 385.3, 139.6, 389.9, 147.6],
                [394.8, 156.1, 233.8, 236.1, 237.7, 242.8],
                [237.7, 242.8, 392.0, 151.9, 392.8, 153.3],
                [395.3, 157.7, 241.6, 248.7, 241.6, 248.7],
                [246.0, 256.3, 388.6, 154.2, 392.7, 161.4],
                [393.9, 163.5, 245.1, 254.5, 245.2, 254.7],
                [249.1, 261.5, 390.8, 170.6, 390.8, 170.6],
                [390.8, 170.6, 243.2, 257.7, 245.8, 262.2],
                [245.8, 262.2, 388.5, 178.1, 389.2, 179.4],
                [248.0, 268.2, 243.2, 257.7, 245.8, 262.2],
                [248.0, 268.2, 386.8, 178.6, 390.9, 185.7],
                [394.1, 191.2, 244.6, 267.4, 249.0, 275.0],
                [252.7, 281.4, 383.1, 192.1, 385.5, 196.2],
                [385.7, 196.6, 247.8, 274.4, 251.6, 281.0],
                [254.2, 285.5, 391.7, 200.1, 391.7, 200.1],
                [394.9, 205.7, 247.4, 286.6, 249.2, 289.7],
                [249.9, 290.9, 382.7, 207.1, 385.1, 211.3],
                [387.4, 215.4, 257.9, 292.4, 258.2, 292.8],
                [260.4, 296.7, 390.2, 216.6, 390.2, 216.6],
                [390.2, 216.6, 255.4, 297.9, 257.3, 301.1],
                [257.3, 301.1, 387.8, 222.0, 389.4, 224.8],
                [393.5, 231.8, 260.0, 301.5, 262.6, 306.0],
                [264.0, 308.3, 382.5, 231.4, 384.8, 235.4],
                [269.2, 310.1, 260.0, 301.5, 262.6, 306.0],
                [270.4, 312.2, 389.3, 240.8, 389.3, 240.8],
                [389.3, 240.8, 270.7, 314.9, 271.6, 316.4],
                [273.4, 319.5, 390.2, 248.0, 390.2, 248.0],
                [391.0, 249.4, 273.4, 317.3, 275.8, 321.4],
                [279.1, 327.1, 386.1, 250.7, 389.2, 255.9],
                [389.2, 255.9, 280.4, 324.1, 281.2, 325.5],
                [283.0, 328.7, 387.2, 260.7, 388.7, 263.4],
                [389.9, 265.3, 289.5, 328.7, 289.5, 328.7],
                [290.9, 331.1, 386.0, 270.8, 387.0, 272.4],
                [294.1, 334.0, 289.5, 328.7, 289.5, 328.7],
                [295.7, 337.0, 385.6, 280.4, 385.9, 281.0],
                [299.2, 338.6, 289.5, 328.7, 289.5, 328.7],
                [301.8, 343.2, 389.2, 284.9, 390.0, 286.2],
                [307.3, 341.6, 306.0, 345.9, 307.6, 348.8],
                [308.5, 343.7, 387.1, 294.4, 387.6, 295.3],
                [387.6, 295.3, 306.0, 345.9, 307.6, 348.8],
                [308.3, 350.0, 389.9, 301.3, 389.9, 301.3],
                [391.4, 303.9, 314.3, 352.9, 314.3, 352.9],
                [314.8, 353.7, 386.5, 306.5, 388.6, 310.0],
                [389.6, 311.8, 324.0, 352.8, 324.9, 354.3],
                [325.6, 355.6, 391.3, 314.5, 392.0, 315.6],
                [392.7, 316.8, 326.0, 361.1, 326.0, 361.1],
                [326.4, 361.8, 389.2, 321.3, 390.6, 323.7],
                [392.3, 326.6, 331.2, 366.2, 331.2, 366.2],
                [332.4, 368.3, 388.2, 333.3, 388.2, 333.3],
                [389.0, 334.6, 338.1, 366.6, 339.4, 368.9],
                [340.4, 370.5, 391.1, 339.1, 391.1, 339.1],
                [344.2, 373.6, 338.1, 366.6, 339.4, 368.9],
                [344.2, 373.6, 385.3, 349.9, 385.3, 349.9],
                [386.0, 351.1, 349.7, 377.4, 349.8, 377.6],
                [350.1, 378.2, 391.3, 351.3, 392.3, 353.0],
                [392.3, 353.0, 359.8, 379.5, 360.0, 379.9],
                [388.6, 363.4, 391.3, 351.3, 392.3, 353.0],
                [389.5, 364.9, 364.1, 385.6, 364.1, 385.6],
                [385.4, 373.3, 390.2, 377.5, 390.6, 378.2],
                [385.6, 373.6, 371.6, 389.1, 371.6, 389.1],
                [371.8, 389.3, 390.2, 377.5, 390.6, 378.2],
                [390.6, 378.2, 380.2, 392.1, 380.2, 392.1],
                [380.3, 392.3, 387.1, 387.8, 387.2, 388.0]
                ]
            }
            ]
        };






        // THIS IS THE FUNCTION I HAVE AN ISSUE WITH, THE CONSOLE, LOGS ALL OF THE RIGHT THINGS HOWEVER THE CANVAS SHOWS NOTHING??

        //function init() {
        var canvasL = document.getElementById("canvasContainerMyVideos");
        //alert('antes');
        var c = canvasL.getContext("2d");
        //alert('antes');
        function sketch(args)//args:sketchObject
        {
            var conf = args;
            var stroke = 0; // set the stroke to start of counter
            var s = conf.strokes[stroke];
            var point = 0; //set the err stroke point to start counter
            function newStroke()
            {
                console.log("newstroke",s)
                c.save();
                c.lineWidth = s.lineWidth;
                c.strokeStyle = s.strokeStyle;
                c.lineCap = s.lineCap || "round"; 
                c.lineJoin = s.lineJoin || "round";
                c.beginPath();
                c.moveTo.apply(c, s.startPoint);
                newPoint();
            }
            function newPoint()
            {
                console.log("newpoint:",conf.strokes[stroke].points[point])
                c.bezierCurveTo.apply(c, conf.strokes[stroke].points[point]);  //draw a new curve

                c.stroke();
                c.restore();
                c.restore();
                // check if it is the last point to draw to
                if(point>=(conf.strokes[stroke].points.length-1)) 
                {
                    //progress to new stroke if we're not there already
                    if(stroke<(conf.strokes.length-1)) 
                    {
                        stroke++;
                        point = 0;
                        newStroke()
                    }
                }
                else // otherwise set a timer to draw the new point/line segment
                {
                    point++;
                    setTimeout(newPoint,conf.strokes[stroke].interval,this)
                }
            }
            ///newStroke(); //--Ejecucion del codigo que dibuja la figura a trazos sobre el canvas
        }
        sketch(logoSketch);
        //}
    },

    funcionLogInGeneral: function() {
        Ext.getCmp("tabPanelInicial").setActiveItem(Ext.getCmp("containerMain"));


        //Llamado sujeto a paso de parametros
        MyApp.app.funcionSeteadoConfigInicial();
    },

    logInFacebookSettings: function() {
        Ext.getCmp("panelEleccionLogInFacebookOrNot").setHidden(1);



        MyApp.app.funcionLogInGeneral();
    },

    logInSinFacebookSettings: function() {
        MyApp.app.funcionLogInGeneral();
    },

    funcionIniciadoPlayMyVideos: function(video) {
        video.addEventListener('play', function(){
            MyApp.app.functionFillCharts();
            video.playbackRate=1;
            variableBoolParaDetencionDraw=0;
            cw = video.clientWidth;
            ch = video.clientHeight;
            //alert(Ext.getCmp("viewportAspogamo").getWindowWidth());
            document.getElementById("canvasContainerMyVideos").width = Ext.Viewport.getWindowWidth()*0.9;
            document.getElementById("canvasContainerMyVideos").height = Ext.Viewport.getWindowHeight()*0.8*0.75;
            //canvasContext=document.getElementById("canvasContainerMyVideos").getContext('2d');
            //MyApp.app.dibujarVideoSobreCanvas(video);
        },false);
        //En caso de que se detenga el video, se detiene el dibujado del
        //video sobre el canvas
        video.addEventListener('pause', function(){
            clearTimeout(timeOutFillCharts);
            variableBoolParaDetencionDraw=1;
        },false);
    },

    dibujarVideoSobreCanvas: function(v) {
        //Funcion de dibujado del video en el canvas
        //draw=function(v,c,bc,w,h) {
        try{
            clearTimeout(variableTimeOutGeneral);
        }
        catch(e){}
        if(v.paused || v.ended)	return false;
        // First, draw it into the backing canvas
        //bc.drawImage(v,0,0,w,h);
        // Grab the pixel data from the backing canvas
        if(variableBoolParaDetencionDraw===0){
            variableTimeOutGeneral=setTimeout(function(){
                MyApp.app.dibujarVideoSobreCanvas(v);
            },20);
        }
        else{
        }
        //};
    },

    httpURL: function() {

    },

    functionFillCharts: function() {
        timeOutFillCharts=setTimeout(function(){
            //alert(((Math.random() * 11) + 1));
            //   data31=
            //   [{id: 1, name: "El Chunche",    number: 20,    pass: ((Math.random() * 110) + 1),    sPass: ((Math.random() * 40) + 1),    fPass: 1},
            //   {id: 2, name: "Pato Lopez",    number: 6,    pass: ((Math.random() * 110) + 1),    sPass: ((Math.random() * 75) + 1),    fPass: 2},
            //  {id: 3, name: "El Chicky",    number: 10,    pass:((Math.random() * 51) + 1),    sPass: ((Math.random() * 114) + 1),    fPass: 6},
            //  {id: 4, name: "Pate",    number: 8,    pass: ((Math.random() * 141) + 1),    sPass: ((Math.random() * 151) + 1),    fPass: 6}];

            //alert(data31);

            //Ext.getStore("MyStore").setData(data31);
            // MyApp.app.laQueQuiera();
            //alert(data31)
            // alert("1");
            Ext.getStore("storePlayer").load();





            Ext.Ajax.request({
                url: 'http://192.168.43.237/as2PhP/pases.php',
                disableCaching: true,
                widhCredentials: true, //CONFIRMAR
                useDefaultXhrHeader: false,
                method: "POST",
                failure: function(response){
                    //Ext.Msg.alert('Aviso', 'Problema de conexión, inténtelo de nuevo más tarde.', Ext.emptyFn);
                },
                success: function(response){
                    var text = response.responseText;
                    // process server response here
                }
            });

            Ext.Ajax.request({
                url: 'http://192.168.43.237/as2PhP/distancia.php',
                disableCaching: true,
                widhCredentials: true, //CONFIRMAR
                useDefaultXhrHeader: false,
                method: "POST",
                failure: function(response){
                    Ext.Msg.alert('Aviso', 'Problema de conexión, inténtelo de nuevo más tarde.', Ext.emptyFn);
                },
                success: function(response){
                    var text = response.responseText;
                    // process server response here
                }
            });


            /*
            Ext.Ajax.request({
            url: 'http://192.168.2.105/as2PhP/pases.php',
            success: function(response){
            var text = response.responseText;
            // process server response here
        }
    });

    Ext.Ajax.request({
        url: 'http://192.168.2.105/as2PhP/distancia.php',
        success: function(response){
            var text = response.responseText;
            // process server response here
        }
    });
    */


    MyApp.app.functionFillCharts();
    },2000);
    }

});
